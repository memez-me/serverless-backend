# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: memez
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: memez
# "service" is the name of this project. This will also be added to your AWS resource names.
service: memez-backend

stages:
  default:
    params:
      messagesTableName: "chat-messages-table-${sls:stage}"
      likesTableName: "chat-likes-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [MessagesTable, Arn]
            - Fn::Join: ['/', [Fn::GetAtt: [MessagesTable, Arn], 'index', 'MemecoinIndex']]
            - Fn::Join: ['/', [Fn::GetAtt: [MessagesTable, Arn], 'index', 'AuthorIndex']]
            - Fn::GetAtt: [LikesTable, Arn]
            - Fn::Join: ['/', [Fn::GetAtt: [LikesTable, Arn], 'index', 'UserIndex']]
  environment:
    MESSAGES_TABLE: ${param:messagesTableName}
    LIKES_TABLE: ${param:likesTableName}
    TENDERLY_ADMIN_RPC: ${env:TENDERLY_ADMIN_RPC}
    PINATA_API_KEY: ${env:PINATA_API_KEY}

functions:
  api:
    handler: handler.handler
    events:
      - httpApi: "*"

resources:
  Resources:
    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: author
            AttributeType: S
          - AttributeName: memecoin
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: MemecoinIndex
            KeySchema:
              - AttributeName: memecoin
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: AuthorIndex
            KeySchema:
              - AttributeName: author
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
        TableName: ${param:messagesTableName}
    LikesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: user
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: user
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TableName: ${param:likesTableName}
